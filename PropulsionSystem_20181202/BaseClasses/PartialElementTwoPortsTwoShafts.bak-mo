within PropulsionSystem.BaseClasses;

partial model PartialElementTwoPortsTwoShafts
  import Modelica.Constants;
  
  /********************************************************
    Declaration
  ********************************************************/
  //********** Package **********
  replaceable package Medium= Modelica.Media.Interfaces.PartialMedium
    annotation (choicesAllMatching= true);
  
  
  //********** Parameters **********
  parameter Boolean allowFlowReversal= true
    "= true to allow flow reversal, false restricts to design direction (port_a -> port_b)"
    annotation(Dialog(tab="Assumptions"), Evaluate=true);
    
  parameter Modelica.SIunits.Area Amech_I= 1.0 
    annotation(Dialog(group = "Geometry"));
  
  parameter Modelica.SIunits.Area Amech_O= 1.0
    annotation(Dialog(group = "Geometry"));
  
  
  //********** Internal variables **********
  Medium.BaseProperties fluid_I "flow station of inlet";
  Medium.BaseProperties fluid_O "flow station of outlet";
  
  Modelica.SIunits.Power pwr "power via shaft, positive if fluid generates power";
  Modelica.SIunits.Torque trq(start= 1.0) "trq via shaft";
  Modelica.SIunits.Conversions.NonSIunits.AngularVelocity_rpm Nmech "mechanical rotation speed, rpm";
  Modelica.SIunits.AngularVelocity omega(start= 1.0) "mechanical rotation speed, rad/sec";
  Modelica.SIunits.Angle phi(start= 0.0) "mechanical rotation displacement, rad";
  
  
  //********** Interfaces **********
  Modelica.Fluid.Interfaces.FluidPort_a port_a
  (
    redeclare package Medium = Medium,
    m_flow(min=if allowFlowReversal then -Constants.inf else 0.0
          , start= m_flow_start)
  ) 
    annotation(
    Placement(visible = true, transformation(origin = {-100, 98}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-100, 98}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  
  Modelica.Fluid.Interfaces.FluidPort_b port_b
  (
    redeclare package Medium = Medium,
    m_flow(max=if allowFlowReversal then +Constants.inf else 0.0
           )
  ) 
    annotation(
    Placement(visible = true, transformation(origin = {100, 98}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {100, 98}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  
  Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a 
    annotation(
    Placement(visible = true, transformation(origin = {-100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-98, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  
  Modelica.Mechanics.Rotational.Interfaces.Flange_b flange_b
    annotation(
    Placement(visible = true, transformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  
  
  //********** Initialization **********
  parameter Medium.AbsolutePressure p_a_start= 101.3*1000
    "Start value of pressure at port a"
    annotation(Dialog(tab = "Initialization"));
  
  parameter Medium.AbsolutePressure p_b_start= 101.3*1000*0.99
    "Start value of pressure at port b"
    annotation(Dialog(tab = "Initialization"));
  
  parameter Medium.MassFlowRate m_flow_start = 10.0
    "Start value for mass flow rate"
     annotation(Evaluate=true, Dialog(tab = "Initialization"));
  

//********** Protected objects **********
protected
  parameter Boolean port_a_exposesState = false
    "= true if port_a exposes the state of a fluid volume";
  parameter Boolean port_b_exposesState = false
    "= true if port_b.p exposes the state of a fluid volume";
  parameter Boolean showDesignFlowDirection = false
    "= false to hide the arrow in the model icon"; 


/********************************************************
  Model coding
********************************************************/
equation
  //********** Geometries **********
  //##### none #####
  
  
  //********** Connections, interface <-> internal variables **********
  //-- inlet, port_a --
  fluid_I.p= port_a.p;
  port_a.h_outflow= fluid_I.h;
  fluid_I.h= inStream(port_a.h_outflow);
  fluid_I.Xi= inStream(port_a.Xi_outflow);
  
  //-- outlet, port_b --
  port_b.p= fluid_O.p;
  port_b.h_outflow= fluid_O.h;
  fluid_O.Xi= inStream(port_b.Xi_outflow);
  
  //-- shaft-front, flange_a --
  flange_a.phi = phi;
  
  //-- shaft-front, flange_b --
  flange_b.phi = phi;
  
  
  //********** Eqns describing physics **********
  //##### none #####
  
  
/********************************************************
  Graphics
********************************************************/
//##### none #####



end PartialElementTwoPortsTwoShafts;
